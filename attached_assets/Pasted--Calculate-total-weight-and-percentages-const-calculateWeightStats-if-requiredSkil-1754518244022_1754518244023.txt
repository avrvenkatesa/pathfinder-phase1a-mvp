// Calculate total weight and percentages
const calculateWeightStats = () => {
  if (!requiredSkills || requiredSkills.length === 0) return null;
  
  const totalWeight = requiredSkills.reduce((sum, skill) => sum + skill.weight, 0);
  const skillsWithPercentage = requiredSkills.map(skill => ({
    ...skill,
    percentage: Math.round((skill.weight / totalWeight) * 100)
  }));
  
  return { totalWeight, skillsWithPercentage };
};

// Add this component after the skills list
const WeightSystemDisplay = () => {
  const stats = calculateWeightStats();
  if (!stats) return null;
  
  return (
    <div className="mt-3 p-3 bg-gray-50 rounded-lg border border-gray-200">
      <div className="flex items-center justify-between mb-2">
        <span className="text-sm font-medium text-gray-700">
          Total Weight: {stats.totalWeight} points
        </span>
        <button
          onClick={() => normalizeWeights()}
          className="text-xs px-2 py-1 bg-blue-100 text-blue-700 rounded hover:bg-blue-200"
        >
          Normalize to 100%
        </button>
      </div>
      
      {/* Weight Distribution Bar */}
      <div className="w-full h-4 bg-gray-200 rounded-full overflow-hidden flex">
        {stats.skillsWithPercentage.map((skill, idx) => (
          <div
            key={idx}
            className={`h-full ${getWeightColor(skill.weight)}`}
            style={{ width: `${skill.percentage}%` }}
            title={`${skill.name}: ${skill.percentage}%`}
          />
        ))}
      </div>
      
      {/* Weight Legend */}
      <div className="flex justify-between mt-2 text-xs text-gray-600">
        <span>ðŸŸ¢ Nice-to-have (1-3)</span>
        <span>ðŸŸ¡ Important (4-7)</span>
        <span>ðŸ”´ Critical (8-10)</span>
      </div>
    </div>
  );
};

// Helper function for weight colors
const getWeightColor = (weight) => {
  if (weight >= 8) return 'bg-red-500';
  if (weight >= 4) return 'bg-yellow-500';
  return 'bg-green-500';
};

// Function to normalize weights to 100
const normalizeWeights = () => {
  const totalWeight = requiredSkills.reduce((sum, skill) => sum + skill.weight, 0);
  const normalizedSkills = requiredSkills.map(skill => ({
    ...skill,
    weight: Math.round((skill.weight / totalWeight) * 100)
  }));
  setRequiredSkills(normalizedSkills);
};