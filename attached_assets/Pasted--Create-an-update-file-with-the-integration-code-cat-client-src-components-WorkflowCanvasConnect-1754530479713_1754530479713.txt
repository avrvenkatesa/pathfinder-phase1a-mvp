# Create an update file with the integration code
cat > client/src/components/WorkflowCanvasConnectorUpdate.tsx << 'EOF'
// Add these imports to your WorkflowCanvas component
import { WorkflowConnector, ConnectionCreator, Connection } from './WorkflowConnector';

// Add this state to your WorkflowCanvas component
const [connections, setConnections] = useState<Connection[]>([]);
const [selectedConnection, setSelectedConnection] = useState<string | null>(null);
const [connectionMode, setConnectionMode] = useState(false);

// Add these handlers
const handleConnectionCreate = (connection: Omit<Connection, 'id'>) => {
  const newConnection: Connection = {
    ...connection,
    id: `conn-${Date.now()}`
  };
  setConnections([...connections, newConnection]);
};

const handleConnectionSelect = (connectionId: string) => {
  setSelectedConnection(connectionId);
  setSelectedElement(null); // Deselect elements when selecting connection
};

const handleConnectionDelete = (connectionId: string) => {
  setConnections(connections.filter(c => c.id !== connectionId));
  setSelectedConnection(null);
};

// Add keyboard handler for delete key
useEffect(() => {
  const handleKeyDown = (e: KeyboardEvent) => {
    if (e.key === 'Delete' && selectedConnection) {
      handleConnectionDelete(selectedConnection);
    }
  };
  
  window.addEventListener('keydown', handleKeyDown);
  return () => window.removeEventListener('keydown', handleKeyDown);
}, [selectedConnection]);

// Add connection mode toggle button to your toolbar
<button
  onClick={() => setConnectionMode(!connectionMode)}
  className={`p-2 rounded ${connectionMode ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}
  title="Create Connections"
>
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
          d="M13 10V3L4 14h7v7l9-11h-7z" />
  </svg>
</button>

// In your SVG canvas, add the connector rendering BEFORE elements (so they appear behind)
<svg className="absolute inset-0" style={{ zIndex: 5 }}>
  {/* Render connections */}
  {connections.map(connection => {
    const sourceEl = elements.find(el => el.id === connection.sourceId);
    const targetEl = elements.find(el => el.id === connection.targetId);
    
    if (!sourceEl || !targetEl) return null;
    
    return (
      <WorkflowConnector
        key={connection.id}
        connection={connection}
        sourceElement={sourceEl}
        targetElement={targetEl}
        onSelect={handleConnectionSelect}
        onDelete={handleConnectionDelete}
        isSelected={selectedConnection === connection.id}
      />
    );
  })}
  
  {/* Connection creation mode */}
  {connectionMode && (
    <ConnectionCreator
      elements={elements}
      onConnectionCreate={handleConnectionCreate}
    />
  )}
</svg>

// Add connection properties panel when a connection is selected
{selectedConnection && (
  <div className="absolute right-4 top-20 w-64 bg-white p-4 rounded-lg shadow-lg">
    <h3 className="font-semibold mb-3">Connection Properties</h3>
    <div className="space-y-3">
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Type
        </label>
        <select
          value={connections.find(c => c.id === selectedConnection)?.type}
          onChange={(e) => {
            setConnections(connections.map(c => 
              c.id === selectedConnection 
                ? { ...c, type: e.target.value as any }
                : c
            ));
          }}
          className="w-full px-3 py-2 border rounded"
        >
          <option value="sequence">Sequence Flow</option>
          <option value="conditional">Conditional Flow</option>
          <option value="default">Default Flow</option>
          <option value="message">Message Flow</option>
        </select>
      </div>
      
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Label
        </label>
        <input
          type="text"
          value={connections.find(c => c.id === selectedConnection)?.label || ''}
          onChange={(e) => {
            setConnections(connections.map(c => 
              c.id === selectedConnection 
                ? { ...c, label: e.target.value }
                : c
            ));
          }}
          className="w-full px-3 py-2 border rounded"
          placeholder="Enter label..."
        />
      </div>
      
      <button
        onClick={() => handleConnectionDelete(selectedConnection)}
        className="w-full px-3 py-2 bg-red-500 text-white rounded hover:bg-red-600"
      >
        Delete Connection
      </button>
    </div>
  </div>
)}
EOF