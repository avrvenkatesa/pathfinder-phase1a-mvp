version: '3.8'

services:
  # ===================
  # MICROSERVICES
  # ===================
  
  # API Gateway (Port 3000)
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: pathfinder-api-gateway
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - API_GATEWAY_PORT=3000
      - AUTH_SERVICE_PORT=3003
      - CONTACT_SERVICE_PORT=3001
      - WORKFLOW_SERVICE_PORT=3002
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:5000,http://localhost:3000}
      - HOST=0.0.0.0
    depends_on:
      - auth-service
      - contact-service
      - workflow-service
    networks:
      - pathfinder-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Authentication Service (Port 3003)
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: pathfinder-auth-service
    restart: unless-stopped
    expose:
      - "3003"
    environment:
      - NODE_ENV=production
      - AUTH_SERVICE_PORT=3003
      - DATABASE_URL=${DATABASE_URL}
      - SESSION_SECRET=${SESSION_SECRET}
      - JWT_SECRET=${JWT_SECRET}
      - REPLIT_DOMAINS=${REPLIT_DOMAINS}
      - REPL_ID=${REPL_ID}
      - ISSUER_URL=${ISSUER_URL}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000}
      - HOST=0.0.0.0
    depends_on:
      - postgres
      - redis
    networks:
      - pathfinder-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Contact Service (Port 3001)
  contact-service:
    build:
      context: ./services/contact-service
      dockerfile: Dockerfile
    container_name: pathfinder-contact-service
    restart: unless-stopped
    expose:
      - "3001"
    environment:
      - NODE_ENV=production
      - CONTACT_SERVICE_PORT=3001
      - DATABASE_URL=${DATABASE_URL}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000}
      - HOST=0.0.0.0
    depends_on:
      - postgres
    networks:
      - pathfinder-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Workflow Service (Port 3002)
  workflow-service:
    build:
      context: ./services/workflow-service
      dockerfile: Dockerfile
    container_name: pathfinder-workflow-service
    restart: unless-stopped
    expose:
      - "3002"
    environment:
      - NODE_ENV=production
      - WORKFLOW_SERVICE_PORT=3002
      - DATABASE_URL=${DATABASE_URL}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000}
      - HOST=0.0.0.0
    depends_on:
      - postgres
    networks:
      - pathfinder-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===================
  # INFRASTRUCTURE
  # ===================

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pathfinder-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-pathfinder}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - pathfinder-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-pathfinder}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching and Sessions
  redis:
    image: redis:7-alpine
    container_name: pathfinder-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - pathfinder-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx Load Balancer and Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: pathfinder-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/microservices.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
    networks:
      - pathfinder-network

  # ===================
  # MONITORING (Optional)
  # ===================

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: pathfinder-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus-microservices.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - pathfinder-network
    depends_on:
      - api-gateway
      - auth-service
      - contact-service
      - workflow-service

  # Grafana for Monitoring Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: pathfinder-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"  # Note: Changed port to avoid conflict with contact service
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/microservices:/etc/grafana/provisioning
    networks:
      - pathfinder-network
    depends_on:
      - prometheus

  # ===================
  # LEGACY MONOLITH (Optional for migration period)
  # ===================

  # Keep the original monolith for gradual migration
  legacy-api:
    build:
      context: .
      target: production
      dockerfile: Dockerfile
    container_name: pathfinder-legacy-api
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - SESSION_SECRET=${SESSION_SECRET}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3000}
      - SENTRY_DSN=${SENTRY_DSN}
      - LOG_LEVEL=info
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - pathfinder-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  pathfinder-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local